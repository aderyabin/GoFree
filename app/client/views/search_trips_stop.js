// Generated by CoffeeScript 1.4.0
var SearchTripsStop;

SearchTripsStop = Backbone.View.extend({
  tagName: 'li',
  className: 'v-s-t-stop',
  initialize: function(options) {
    this.list = options.list;
    this.minDate = options.minDate ? options.minDate : null;
    this.maxDate = options.maxDate ? options.maxDate : null;
    this.manageKeypress = _.bind(this.manageKeypress, this);
    this.manageClick = _.bind(this.manageClick, this);
    this.render();
    this.suggestActive = false;
    this.suggestEl = this.$el.find('.v-s-t-s-p-suggestions');
    this.placeInput = this.$el.find('.v-s-t-s-p-name');
    this.suggestSelected = null;
    this.lastQuery = null;
    this.calendar = this.$el.find('input.m-input-calendar').m_inputCalendar()[0];
    this.model.on('change:place', this.updatePlaceValue, this);
    this.updateCalendar();
    app.log('[app.views.SearchTripsStop]: initialize');
    return this;
  },
  events: {
    'click .v-s-t-s-removestop': 'removeStop',
    'change .m-i-c-input': 'dateChanged',
    'webkitspeechchange .v-s-t-s-p-name': 'placeChanged',
    'keyup .v-s-t-s-p-name': 'placeChanged',
    'click .v-s-t-s-p-suggestion': 'placeSelected'
  },
  dateChanged: function(e) {
    this.model.set('date', e.target.value);
    return this.$el.find('.v-s-t-s-date').find('.m-validate-error').remove();
  },
  setMinDate: function(date) {
    this.minDate = date;
    return this.updateCalendar();
  },
  setMaxDate: function(date) {
    this.maxDate = date;
    return this.updateCalendar();
  },
  updateCalendar: function() {
    this.calendar.unlockDates();
    if (this.minDate) {
      this.calendar.lockDates(null, this.minDate);
    }
    if (this.maxDate) {
      return this.calendar.lockDates(this.maxDate, null);
    }
  },
  updatePlaceValue: function(model, place) {
    return this.placeInput.val("" + place.name_ru + ", " + place.country_name_ru);
  },
  manageKeypress: function(e) {
    var next, place, _ref, _ref1;
    switch (e.keyCode) {
      case 38:
      case 40:
        app.e(e);
        if (!((_ref = this.suggestSelected) != null ? _ref.length : void 0)) {
          this.suggestSelected = this.suggestEl.find(e.keyCode === 38 ? 'li:last-child' : 'li:first-child');
          return this.suggestSelected.addClass('selected');
        } else {
          next = e.keyCode === 38 ? this.suggestSelected.prev() : this.suggestSelected.next();
          this.suggestSelected.removeClass('selected');
          if (next.length) {
            this.suggestSelected = next;
            return this.suggestSelected.addClass('selected');
          } else {
            return this.suggestSelected = null;
          }
        }
        break;
      case 13:
        app.e(e);
        if ((_ref1 = this.suggestSelected) != null ? _ref1.length : void 0) {
          place = this.suggestions[+this.suggestSelected.data('index')];
          this.model.set('place', place);
          this.suggestSelected = null;
          return this.clearSuggest();
        }
    }
  },
  manageClick: function(e) {
    var $target;
    $target = $(e.target);
    if (this.suggestActive && !$target.is(this.suggestEl) && !$target.is(this.placeInput)) {
      return this.clearSuggest();
    }
  },
  placeSelected: function(e) {
    var place;
    place = this.suggestions[+e.target.getAttribute('data-index')];
    this.model.set('place', place);
    return this.clearSuggest();
  },
  renderSuggest: function(resp) {
    var i, list, o;
    this.suggestions = resp.value;
    list = (function() {
      var _i, _len, _ref, _results;
      _ref = this.suggestions;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        o = _ref[i];
        _results.push("<li class=\"v-s-t-s-p-suggestion\" data-index=\"" + i + "\">\n  <strong>" + o.name_ru + "</strong>, " + o.country_name_ru + "\n</li>");
      }
      return _results;
    }).call(this);
    this.suggestEl.html(list.join(''));
    if (!this.suggestActive) {
      this.suggestEl.addClass('active');
      this.suggestActive = true;
      app.dom.doc.on('keydown', this.manageKeypress);
      app.dom.doc.on('click', this.manageClick);
    }
    return this.suggestSelected = null;
  },
  clearSuggest: function() {
    this.suggestEl.removeClass('active');
    this.suggestActive = false;
    this.suggestEl.html('');
    this.lastQuery = null;
    app.dom.doc.off('keydown', this.manageKeypress);
    return app.dom.doc.off('click', this.manageClick);
  },
  placeChanged: _.debounce(function(e) {
    var place;
    place = $.trim(e.target.value);
    if (!place.length) {
      return;
    }
    if (this.model.get('place').name !== place && (this.lastQuery !== place || !this.suggestActive)) {
      $.ajax({
        url: app.api.places + place,
        success: this.renderSuggest,
        error: this.clearSuggest,
        context: this
      });
      return this.lastQuery = place;
    }
  }, 100),
  render: function() {
    this.$el.html(app.templates.search_trips_stop(this.model.toJSON()));
    return this.list.append(this.$el);
  },
  removeStop: function() {
    this.undelegateEvents();
    this.calendar.destroy();
    delete this.calendar;
    this.model.trigger('delete', this.model);
    return this.remove();
  }
});

app.views.SearchTripsStop = SearchTripsStop;
