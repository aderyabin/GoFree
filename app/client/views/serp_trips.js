// Generated by CoffeeScript 1.4.0
var SERPTrips;

SERPTrips = Backbone.View.extend({
  trips: {},
  _expandedHash: {},
  _budgetHash: {},
  el: '.p-s-trips-wrap',
  progress: 0,
  budget: 0,
  spent: 0,
  expanded: 0,
  _locked: null,
  initialize: function(opts) {
    this.opts = opts;
    this.hash = this.opts.hash;
    this.render();
    this.progressMeterEl = $('.v-s-t-p-meter');
    this.budgetMeterEl = $('.v-s-t-b-meter');
    this.container = this.$el.find('.v-serp-trips-container');
    this.amountSpentEl = $('.v-s-t-b-spentamount');
    this.amountLeftEl = $('.v-s-t-b-leftamount');
    app.socket.on('progress', _.bind(this.updateProgress, this));
    app.on('serp_selected', this.updateBudgetAdd, this);
    app.on('serp_deselected', this.updateBudgetRemove, this);
    app.on('resize', this.updateMeters, this);
    this.initTrips();
    this.expandFirst();
    this.updateMeters();
    return app.log('[app.views.SERPTrips]: initialize');
  },
  setBudget: function(num) {
    this.budget = num;
    return this.setBudgetMeter();
  },
  updateMeters: function() {
    this.setProgressMeter();
    return this.setBudgetMeter();
  },
  updateProgress: function(data) {
    if (data.hash !== this.hash) {
      return;
    }
    this.progress = data.progress;
    this.setProgressMeter();
    return app.log('[app.views.SERPTrips]: progress ' + Math.floor(this.progress * 100) + '%');
  },
  updateBudgetAdd: function(data) {
    this._budgetHash[data.signature] = data.model.get('price');
    return this.setBudgetMeter();
  },
  updateBudgetRemove: function(data) {
    delete this._budgetHash[data.signature];
    return this.setBudgetMeter();
  },
  setProgressMeter: function() {
    var pos;
    pos = app.size.width * this.progress;
    return this.progressMeterEl.animate({
      left: pos
    }, 200, 'linear');
  },
  setBudgetMeter: function() {
    var diff, perc, pos;
    this.spent = _.reduce(_.values(this._budgetHash), function(memo, num) {
      return memo + num;
    }, 0);
    diff = this.budget - this.spent;
    perc = Math.min(this.spent / this.budget, 1);
    pos = app.size.width * perc;
    this.amountSpentEl.html(app.utils.formatNum(this.spent));
    this.amountLeftEl.html(app.utils.formatNum(diff));
    return this.budgetMeterEl.css({
      left: pos
    });
  },
  initTrips: function() {
    var iterator,
      _this = this;
    iterator = function(model) {
      _this.trips[model.cid] = new app.views.SERPTrip({
        container: _this.container,
        model: model
      });
      _this.trips[model.cid].on('expand', _.bind(_this.beforeExpand, _this));
      return _this.trips[model.cid].on('collapse', _.bind(_this.beforeCollapse, _this));
    };
    return this.collection.each(iterator);
  },
  expandFirst: function() {
    var first;
    first = _.values(this.trips)[0];
    first.expand();
    this._locked = first;
    return this._locked.setCollapsable(false);
  },
  findLastExpanded: function() {
    var k, res, v, _ref;
    _ref = this._expandedHash;
    for (k in _ref) {
      v = _ref[k];
      if (v) {
        res = k;
      }
    }
    return res;
  },
  beforeExpand: function(cid) {
    this.expanded++;
    this._expandedHash[cid] = true;
    if (this._locked) {
      return this._locked.setCollapsable(true);
    }
  },
  beforeCollapse: function(cid) {
    if (!this.trips[cid]._collapsable) {
      return;
    }
    this.expanded--;
    this._expandedHash[cid] = false;
    if (this.expanded === 1) {
      this._locked = this.trips[this.findLastExpanded()];
      return this._locked.setCollapsable(false);
    }
  },
  render: function() {
    return this.$el.html(app.templates.serp_trips());
  },
  destroy: function() {
    var budget, k, progress, spent, v, _ref;
    this.undelegateEvents();
    app.socket.removeAllListeners('progress');
    app.off('serp_selected', this.updateBudgetAdd, this);
    app.off('serp_deselected', this.updateBudgetRemove, this);
    app.off('resize', this.updateMeters, this);
    progress = 0;
    budget = 0;
    spent = 0;
    _ref = this.trips;
    for (k in _ref) {
      v = _ref[k];
      v.destroy();
      delete this.trips[k];
    }
    delete this.trips;
    delete this.hash;
    delete this._expandedHash;
    delete this._budgetHash;
    delete this._locked;
    delete this.container;
    delete this.collection;
    return app.log('[app.views.SERPTrips]: destroyed');
  }
});

app.views.SERPTrips = SERPTrips;
